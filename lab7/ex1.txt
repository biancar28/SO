#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>

# define MAX_RESOURCES 10
#define NTHREAD 10
int available_resources = MAX_RESOURCES ;

pthread_mutex_t mtx ;

int decrease_count ( int count )
{

	pthread_mutex_lock(&mtx);
	
	if (available_resources >= count){
		available_resources -= count ;
		printf("Got %d resources %d remaining\n", count, available_resources);
		pthread_mutex_unlock(&mtx);
	}
	else{
		printf("not enough resources\n");
		pthread_mutex_unlock(&mtx);
		return -1;
	}
		
	return 0;
}


int increase_count ( int count )
{
	pthread_mutex_lock(&mtx);
	
	available_resources += count ;
	printf("Released %d resources %d remaining\n", count, available_resources);
	
	pthread_mutex_unlock(&mtx);
	
	return 0;
}

void* thread_routine(void* arg){

    	int count = *(int*) arg;
    	
    	if(decrease_count(count)==0){

        	increase_count(count);
    	}
    
    	
    	return NULL;
}


int main(){


	pthread_t thread[NTHREAD];
	int arg[NTHREAD];
	
	if (pthread_mutex_init (& mtx , NULL)){
	
		perror("problem with pthread_mutex_init");
		return errno;
	}

	for(int i = 0; i< NTHREAD; i++){
		
		arg[i] = i;
		if (pthread_create(&thread[i], NULL, thread_routine, &arg[i])) {
		
			perror ("problem with pthread_create");
			return errno ;
		}
	}
	for(int i = 0; i< NTHREAD; i++){
	
		if (pthread_join(thread[i], NULL)) {
			perror ("problem with pthread_join");
			return errno ;
		}
	}
	
	if(pthread_mutex_destroy(&mtx)){
        	perror("problem with pthread_mutex_destroy\n");
        	return errno;
    	}

	return 0;
}
